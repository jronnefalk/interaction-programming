{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar PasswordStrengthMeter = function PasswordStrengthMeter(_ref) {\n  var score = _ref.score,\n    strengthLevels = _ref.strengthLevels;\n  var defaultLevels = [{\n    label: \"Too Short\",\n    threshold: 1,\n    color: \"gray\"\n  }, {\n    label: \"Weak\",\n    threshold: 3,\n    color: \"red\"\n  }, {\n    label: \"Fair\",\n    threshold: 5,\n    color: \"orange\"\n  }, {\n    label: \"Good\",\n    threshold: 7,\n    color: \"yellow\"\n  }, {\n    label: \"Strong\",\n    threshold: 9,\n    color: \"green\"\n  }];\n  var levels = strengthLevels || defaultLevels;\n  var findLevel = function findLevel() {\n    var currentLevel = levels[0];\n    for (var i = 0; i < levels.length; i++) {\n      if (score >= levels[i].threshold) {\n        currentLevel = levels[i];\n      } else {\n        break;\n      }\n    }\n    return currentLevel;\n  };\n  var calculateBarWidth = function calculateBarWidth() {\n    var level = findLevel();\n    var levelIndex = levels.indexOf(level);\n    var lowerBound = levelIndex === 0 ? 0 : levels[levelIndex - 1].threshold;\n    var range = level.threshold - lowerBound;\n    if (range === 0) return \"100%\";\n    return `${(score - lowerBound) / range * 100}%`;\n  };\n  var barWidth = calculateBarWidth();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: [styles.strengthBar, {\n        width: barWidth,\n        backgroundColor: level.color\n      }]\n    }), _jsxs(Text, {\n      style: styles.label,\n      children: [\"Strength: \", level.label]\n    })]\n  });\n};\nexport default PasswordStrengthMeter;","map":{"version":3,"names":["React","View","Text","StyleSheet","jsx","_jsx","jsxs","_jsxs","PasswordStrengthMeter","_ref","score","strengthLevels","defaultLevels","label","threshold","color","levels","findLevel","currentLevel","i","length","calculateBarWidth","level","levelIndex","indexOf","lowerBound","range","barWidth","style","styles","container","children","strengthBar","width","backgroundColor"],"sources":["/Users/juliaronnefalk/Desktop/TDDC73_vt/GitHub/Untitled/Project/PasswordSDK/PasswordStrengthMeter.js"],"sourcesContent":["import React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\n\nconst PasswordStrengthMeter = ({ score, strengthLevels }) => {\n  // Default strength levels\n  const defaultLevels = [\n    { label: \"Too Short\", threshold: 1, color: \"gray\" },\n    { label: \"Weak\", threshold: 3, color: \"red\" },\n    { label: \"Fair\", threshold: 5, color: \"orange\" },\n    { label: \"Good\", threshold: 7, color: \"yellow\" },\n    { label: \"Strong\", threshold: 9, color: \"green\" },\n  ];\n\n  const levels = strengthLevels || defaultLevels;\n\n  // Find the current level based on the score\n  const findLevel = () => {\n    let currentLevel = levels[0];\n    for (let i = 0; i < levels.length; i++) {\n      if (score >= levels[i].threshold) {\n        currentLevel = levels[i];\n      } else {\n        break;\n      }\n    }\n    return currentLevel;\n  };\n\n  // Calculate the width of the strength bar\n  const calculateBarWidth = () => {\n    const level = findLevel();\n    const levelIndex = levels.indexOf(level);\n    const lowerBound = levelIndex === 0 ? 0 : levels[levelIndex - 1].threshold;\n    const range = level.threshold - lowerBound;\n\n    if (range === 0) return \"100%\"; // Avoid division by zero\n    return `${((score - lowerBound) / range) * 100}%`;\n  };\n\n  const barWidth = calculateBarWidth();\n\n  return (\n    <View style={styles.container}>\n      <View\n        style={[\n          styles.strengthBar,\n          { width: barWidth, backgroundColor: level.color },\n        ]}\n      />\n      <Text style={styles.label}>Strength: {level.label}</Text>\n    </View>\n  );\n};\n\nexport default PasswordStrengthMeter;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAG1B,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAAC,IAAA,EAAkC;EAAA,IAA5BC,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,cAAc,GAAAF,IAAA,CAAdE,cAAc;EAEpD,IAAMC,aAAa,GAAG,CACpB;IAAEC,KAAK,EAAE,WAAW;IAAEC,SAAS,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAO,CAAC,EACnD;IAAEF,KAAK,EAAE,MAAM;IAAEC,SAAS,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAM,CAAC,EAC7C;IAAEF,KAAK,EAAE,MAAM;IAAEC,SAAS,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAS,CAAC,EAChD;IAAEF,KAAK,EAAE,MAAM;IAAEC,SAAS,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAS,CAAC,EAChD;IAAEF,KAAK,EAAE,QAAQ;IAAEC,SAAS,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAQ,CAAC,CAClD;EAED,IAAMC,MAAM,GAAGL,cAAc,IAAIC,aAAa;EAG9C,IAAMK,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAS;IACtB,IAAIC,YAAY,GAAGF,MAAM,CAAC,CAAC,CAAC;IAC5B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,IAAIT,KAAK,IAAIM,MAAM,CAACG,CAAC,CAAC,CAACL,SAAS,EAAE;QAChCI,YAAY,GAAGF,MAAM,CAACG,CAAC,CAAC;MAC1B,CAAC,MAAM;QACL;MACF;IACF;IACA,OAAOD,YAAY;EACrB,CAAC;EAGD,IAAMG,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAA,EAAS;IAC9B,IAAMC,KAAK,GAAGL,SAAS,CAAC,CAAC;IACzB,IAAMM,UAAU,GAAGP,MAAM,CAACQ,OAAO,CAACF,KAAK,CAAC;IACxC,IAAMG,UAAU,GAAGF,UAAU,KAAK,CAAC,GAAG,CAAC,GAAGP,MAAM,CAACO,UAAU,GAAG,CAAC,CAAC,CAACT,SAAS;IAC1E,IAAMY,KAAK,GAAGJ,KAAK,CAACR,SAAS,GAAGW,UAAU;IAE1C,IAAIC,KAAK,KAAK,CAAC,EAAE,OAAO,MAAM;IAC9B,OAAQ,GAAG,CAAChB,KAAK,GAAGe,UAAU,IAAIC,KAAK,GAAI,GAAI,GAAE;EACnD,CAAC;EAED,IAAMC,QAAQ,GAAGN,iBAAiB,CAAC,CAAC;EAEpC,OACEd,KAAA,CAACN,IAAI;IAAC2B,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5B1B,IAAA,CAACJ,IAAI;MACH2B,KAAK,EAAE,CACLC,MAAM,CAACG,WAAW,EAClB;QAAEC,KAAK,EAAEN,QAAQ;QAAEO,eAAe,EAAEZ,KAAK,CAACP;MAAM,CAAC;IACjD,CACH,CAAC,EACFR,KAAA,CAACL,IAAI;MAAC0B,KAAK,EAAEC,MAAM,CAAChB,KAAM;MAAAkB,QAAA,GAAC,YAAU,EAACT,KAAK,CAACT,KAAK;IAAA,CAAO,CAAC;EAAA,CACrD,CAAC;AAEX,CAAC;AAED,eAAeL,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}