{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport PasswordStrengthMeter from \"./PasswordStrengthMeter\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar myStrengthAlgorithm = function myStrengthAlgorithm(password) {\n  var strength = 0;\n  if (password.length > 10) strength += 30;\n  if (/[A-Z]/.test(password)) strength += 20;\n  if (/[a-z]/.test(password)) strength += 20;\n  if (/\\d/.test(password)) strength += 20;\n  if (/[^A-Za-z0-9]/.test(password)) strength += 10;\n  return strength;\n};\nvar PasswordStrengthMeterTest = function PasswordStrengthMeterTest() {\n  return _jsxs(ScrollView, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.testLabel,\n      children: \"Default Configuration\"\n    }), _jsx(View, {\n      style: styles.testCase,\n      children: _jsx(PasswordStrengthMeter, {})\n    }), _jsx(Text, {\n      style: styles.testLabel,\n      children: \"Minimum Length 12\"\n    }), _jsx(View, {\n      style: styles.testCase,\n      children: _jsx(PasswordStrengthMeter, {\n        minLength: 12\n      })\n    }), _jsx(Text, {\n      style: styles.testLabel,\n      children: \"Custom Character Requirements\"\n    }), _jsx(View, {\n      style: styles.testCase,\n      children: _jsx(PasswordStrengthMeter, {\n        requireUpperCase: false,\n        requireLowerCase: true,\n        requireNumbers: false,\n        requireSpecialChars: true\n      })\n    }), _jsx(Text, {\n      style: styles.testLabel,\n      children: \"Custom Strength Algorithm\"\n    }), _jsx(View, {\n      style: styles.testCase,\n      children: _jsx(PasswordStrengthMeter, {\n        customStrengthAlgorithm: customStrengthAlgorithm\n      })\n    }), _jsx(Text, {\n      style: styles.testLabel,\n      children: \"Custom Strength Bar Colors\"\n    }), _jsx(View, {\n      style: styles.testCase,\n      children: _jsx(PasswordStrengthMeter, {\n        strengthBarColors: {\n          weak: \"blue\",\n          fair: \"purple\",\n          good: \"pink\",\n          strong: \"orange\",\n          veryStrong: \"cyan\"\n        }\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 10\n  },\n  testCase: {\n    marginBottom: 20,\n    padding: 10,\n    borderWidth: 1,\n    borderColor: \"#ddd\",\n    borderRadius: 5\n  },\n  testLabel: {\n    fontSize: 16,\n    fontWeight: \"bold\",\n    marginTop: 10\n  }\n});\nexport default PasswordStrengthMeterTest;","map":{"version":3,"names":["React","View","ScrollView","StyleSheet","Text","PasswordStrengthMeter","jsx","_jsx","jsxs","_jsxs","myStrengthAlgorithm","password","strength","length","test","PasswordStrengthMeterTest","style","styles","container","children","testLabel","testCase","minLength","requireUpperCase","requireLowerCase","requireNumbers","requireSpecialChars","customStrengthAlgorithm","strengthBarColors","weak","fair","good","strong","veryStrong","create","flex","padding","marginBottom","borderWidth","borderColor","borderRadius","fontSize","fontWeight","marginTop"],"sources":["/Users/juliaronnefalk/Desktop/TDDC73_vt/GitHub/Untitled/Project/PasswordSDK/PasswordStrengthMeterTest.js"],"sourcesContent":["import React from \"react\";\nimport { View, ScrollView, StyleSheet, Text } from \"react-native\";\nimport PasswordStrengthMeter from \"./PasswordStrengthMeter\";\n\n// User-defined strength algorithm\nconst myStrengthAlgorithm = (password) => {\n  let strength = 0;\n  if (password.length > 10) strength += 30;\n  if (/[A-Z]/.test(password)) strength += 20;\n  if (/[a-z]/.test(password)) strength += 20;\n  if (/\\d/.test(password)) strength += 20;\n  if (/[^A-Za-z0-9]/.test(password)) strength += 10;\n  return strength; // Return a number between 0 and 100\n};\n\nconst PasswordStrengthMeterTest = () => {\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.testLabel}>Default Configuration</Text>\n      <View style={styles.testCase}>\n        <PasswordStrengthMeter />\n      </View>\n\n      <Text style={styles.testLabel}>Minimum Length 12</Text>\n      <View style={styles.testCase}>\n        <PasswordStrengthMeter minLength={12} />\n      </View>\n\n      <Text style={styles.testLabel}>Custom Character Requirements</Text>\n      <View style={styles.testCase}>\n        <PasswordStrengthMeter\n          requireUpperCase={false}\n          requireLowerCase={true}\n          requireNumbers={false}\n          requireSpecialChars={true}\n        />\n      </View>\n\n      <Text style={styles.testLabel}>Custom Strength Algorithm</Text>\n      <View style={styles.testCase}>\n        <PasswordStrengthMeter\n          customStrengthAlgorithm={customStrengthAlgorithm}\n        />\n      </View>\n\n      <Text style={styles.testLabel}>Custom Strength Bar Colors</Text>\n      <View style={styles.testCase}>\n        <PasswordStrengthMeter\n          strengthBarColors={{\n            weak: \"blue\",\n            fair: \"purple\",\n            good: \"pink\",\n            strong: \"orange\",\n            veryStrong: \"cyan\",\n          }}\n        />\n      </View>\n\n      {/* Add more test cases as needed */}\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 10,\n  },\n  testCase: {\n    marginBottom: 20,\n    padding: 10,\n    borderWidth: 1,\n    borderColor: \"#ddd\",\n    borderRadius: 5,\n  },\n  testLabel: {\n    fontSize: 16,\n    fontWeight: \"bold\",\n    marginTop: 10,\n  },\n});\n\nexport default PasswordStrengthMeterTest;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}